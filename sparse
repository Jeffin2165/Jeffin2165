include<stdio.h>
int main()
{
	int a[5][5],b[5][5],c[5][5],d[5][5],e[5][5],x=1,y=1,m,n,p,q,i,j,v;
	printf("Order of first sparse matrix: ");
	scanf("%d%d",&n, &m);
	printf("First matrix: \n");
	for(i=0;i<n;i++)
	{
		for(j=0;j<m;j++)
		{	
			scanf("%d", &a[i][j]);
		}
	}
	printf("Sparse form matrix of a: \n");
	for(i=0;i<n;i++)
	{
		for(j=0;j<m;j++)
		{
			if (a[i][j]!=0)
			{
				c[x][0]=i;
				c[x][1]=j;
				c[x][2]=a[i][j];
				x++;
			}
		}
	}
	c[0][0]=n;
	c[0][1]=m;
	c[0][2]=x-1;
	for(i=0;i<=c[0][2];i++)
	{
		for(j=0;j<=2;j++)
		{	
			printf("%d\t", c[i][j]);
		}
		printf("\n");
	}
	printf("Order of second sparse matrix: ");
	scanf("%d%d",&p, &q);
	printf("Second matrix: \n");
	for(i=0;i<p;i++)
	{
		for(j=0;j<q;j++)
		{	
			scanf("%d", &b[i][j]);
		}
	}
	printf("Sparse form matrix of b: \n");
	for(i=0;i<p;i++)
	{
		for(j=0;j<q;j++)
		{
			if (b[i][j]!=0)
			{
				d[y][0]=i;
				d[y][1]=j;
				d[y][2]=b[i][j];
				y++;
			}
		}
	}
	d[0][0]=p;
	d[0][1]=q;
	d[0][2]=y-1;
	for(i=0;i<=d[0][2];i++)
	{
		for(j=0;j<=2;j++)
		{	
			printf("%d\t", d[i][j]);
		}
		printf("\n");
	}
	i=1,j=1,v=1;
	if((n==p)&&(m==q))
	{
		while((i<=c[0][2])&&(j<=d[0][2]))
		{
			if((c[i][0]==d[j][0])&&(c[i][1]==d[j][1]))
			{
				e[v][0]=c[i][0];
				e[v][1]=c[i][1];
				e[v][2]=c[i][2]+d[j][2];
				i++;
				j++;
				v++;
			}
			else if ((c[i][0]==d[j][0])&&(c[i][1]!=d[i][1]))
			{
				if (c[i][1]<d[i][1])
				{
					e[v][0]=c[i][0];
					e[v][1]=c[i][1];
					e[v][2]=c[i][2];
					i++;
					v++;
				}
				else
				{
					e[v][0]=d[j][0];
					e[v][1]=d[j][1];
					e[v][2]=d[j][2];
					j++;
					v++;
				}
			}
			else if(c[i][0]!=d[j][0])
			{
				if(c[i][0]<d[j][0])
				{
					e[v][0]=c[i][0];
					e[v][1]=c[i][1];
					e[v][2]=c[i][2];
					i++;
					v++;
				}
				else
				{
					e[v][0]=d[j][0];
					e[v][1]=d[j][1];
					e[v][2]=d[j][2];
					j++;
					v++;
				}
			}
		}
		while(i<=c[0][2])
		{
			e[v][0]=c[i][0];
			e[v][1]=c[i][1];
			e[v][2]=c[i][2];
			i++;
			v++;
		}
		while(j<=d[0][2])
		{
			e[v][0]=d[j][0];
			e[v][1]=d[j][1];
			e[v][2]=d[j][2];
			j++;
			v++;
		}
		e[0][0]=n;
		e[0][1]=m;
		e[0][2]=v-1;
		printf("Resultant matrix: \n  ");
		for(i=0;i<=e[0][2];i++)
		{
			for(j=0;j<=2;j++)
			{	
				printf("%d\t", e[i][j]);
			}
			printf("\n");
		}
	}
	else
	{
		printf("Addition is not possible");
	}
}
		
    